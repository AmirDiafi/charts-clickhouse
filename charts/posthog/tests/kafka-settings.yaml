suite: Kafka settings propagated to pods
templates:
  # This list may be too broad or too narrow, I've just added to all deployments
  # that use the django backend.
  - templates/web-deployment.yaml
  - templates/worker-deployment.yaml
  - templates/events-deployment.yaml
  - templates/migrate.job.yaml
  - templates/plugins-deployment.yaml
  # NOTE: we need to include this as it is required by the other templates
  - templates/secrets.yaml

tests:
  - it: should use internal Kafka as default
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_ENABLED
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_HOSTS
            value: RELEASE-NAME-posthog-kafka:9092
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_URL
            value: kafka://RELEASE-NAME-posthog-kafka:9092


  - it: should use internal Kafka when `kafka.enabled` is set to `true` and `externalKafka.brokers` is configured
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      kafka:
        enabled: true
      externalKafka:
        brokers:
          - "broker1:port1"
          - "broker2:port2"
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_ENABLED
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_HOSTS
            value: RELEASE-NAME-posthog-kafka:9092
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_URL
            value: kafka://RELEASE-NAME-posthog-kafka:9092

  - it: should use external Kafka when `kafka.enabled` is set to `false` and `externalKafka.brokers` is configured
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      kafka:
        enabled: false
      externalKafka:
        brokers:
          - broker1:port1
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_ENABLED
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_HOSTS
            value: "broker1:port1"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_URL
            value: kafka://broker1:port1

  - it: should use external Kafka when `kafka.enabled` is set to `false` and `externalKafka.brokers` is configured (multiple brokers)
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      kafka:
        enabled: false
      externalKafka:
        brokers:
          - broker1:port1
          - broker2:port2
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_ENABLED
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_HOSTS
            value: "broker1:port1,broker2:port2"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_URL
            value: kafka://broker1:port1,kafka://broker2:port2

  - it: should configure mTLS when mTLS settings are specified
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/plugins-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      kafka:
        enabled: false
      externalKafka:
        mtls:
          secretName: kafka-secret
          certKey: some-cert
          certKeyKey: some-cert-key
          trustedCertKey: some-trusted-cert
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_BASE64_KEYS
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_CLIENT_CERT_B64
            valueFrom:
              secretKeyRef:
                name: kafka-secret
                key: some-cert
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_CLIENT_CERT_KEY_B64
            valueFrom:
              secretKeyRef:
                name: kafka-secret
                key: some-cert-key
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_TRUSTED_CERT_B64
            valueFrom:
              secretKeyRef:
                name: kafka-secret
                key: some-trusted-cert


  - it: should not configure mTLS when mTLS settings aren't specified
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/plugins-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      kafka:
        enabled: false
      externalKafka:
        mtls:
          secretName:
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_BASE64_KEYS
            value: "false"